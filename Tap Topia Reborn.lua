local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Get the Click RemoteEvent from the Events folder
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Events = ReplicatedStorage:WaitForChild("Events")
local Functions = ReplicatedStorage:WaitForChild("Functions")
local ClickEvent = Events:WaitForChild("Click")
local RebirthEvent = Events:WaitForChild("Rebirth")

-- Function to get all egg names from EggHolders
local function getEggNames()
    local eggNames = {}
    local eggHolders = workspace:WaitForChild("Scripted"):WaitForChild("EggHolders")
    
    for _, egg in pairs(eggHolders:GetChildren()) do
        table.insert(eggNames, egg.Name)
    end
    
    table.sort(eggNames)
    return eggNames
end

-- Get initial egg names
local eggOptions = getEggNames()

-- Get the game name
local function getGameName()
    return game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
end

local Window = Rayfield:CreateWindow({
    Name = getGameName(),
    LoadingTitle = "Loading...",
    LoadingSubtitle = "by D3f4ult",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "AutoClicker",
        FileName = "Config"
    },
    Discord = {
        Enabled = false,
        Invite = "",
        RememberJoins = true
    },
    KeySystem = false,
})

-- Update window name when game name changes
spawn(function()
    while true do
        wait(1) -- Check every second
        local newName = getGameName()
        if Window.Name ~= newName then
            Window.Name = newName
        end
    end
end)

local MainTab = Window:CreateTab("Main", "home") -- Main icon
local HatchTab = Window:CreateTab("Hatch", "egg") -- Hatch icon
local EventTab = Window:CreateTab("Event", "calendar") -- Event icon
local GuisTab = Window:CreateTab("GUIs", "layout") -- GUIs icon
local InfoTab = Window:CreateTab("Info", "info") -- Info icon

local Toggle = MainTab:CreateToggle({
    Name = "Auto Click",
    CurrentValue = false,
    Flag = "AutoClickToggle",
    Callback = function(Value)
        if Value then
            -- Start auto clicking
            getgenv().AutoClick = true
            spawn(function()
                while getgenv().AutoClick do
                    ClickEvent:FireServer()
                    wait(0.05)
                end
            end)
        else
            -- Stop auto clicking
            getgenv().AutoClick = false
        end
    end,
})

local rebirthNumber = 1

local TextBox = MainTab:CreateInput({
    Name = "Rebirth Number",
    PlaceholderText = "Enter number",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        rebirthNumber = tonumber(Text) or 1
    end,
})

local RebirthToggle = MainTab:CreateToggle({
    Name = "Auto Rebirth",
    CurrentValue = false,
    Flag = "AutoRebirthToggle",
    Callback = function(Value)
        if Value then
            -- Start auto rebirth
            getgenv().AutoRebirth = true
            spawn(function()
                while getgenv().AutoRebirth do
                    local args = {
                        [1] = rebirthNumber
                    }
                    RebirthEvent:FireServer(unpack(args))
                    wait(0.05)
                end
            end)
        else
            -- Stop auto rebirth
            getgenv().AutoRebirth = false
        end
    end,
})

-- Create auto mastery toggle
local MasteryToggle = MainTab:CreateToggle({
    Name = "Auto Increase Mastery",
    CurrentValue = false,
    Flag = "AutoMasteryToggle",
    Callback = function(Value)
        if Value then
            -- Start auto mastery
            getgenv().AutoMastery = true
            spawn(function()
                while getgenv().AutoMastery do
                    game:GetService("ReplicatedStorage").Functions.IncreaseMastery:InvokeServer()
                    wait(0.1)
                end
            end)
        else
            -- Stop auto mastery
            getgenv().AutoMastery = false
        end
    end,
})

-- Hatch settings
local hatchDelay = 0.05
local customHatchCount = 1 -- Default to "Single"

-- This table will keep track of active toggles
local activeToggles = {}

-- Function to convert custom count to mode string
local function getHatchMode()
    if customHatchCount == 1 then
        return "Single"
    elseif customHatchCount == 3 then
        return "Triple"
    elseif customHatchCount == 5 then
        return "Quintuple"
    else
        -- For custom numbers, we'll use Single but modify it later
        return "Single"
    end
end

-- Function to hatch a specific egg
local function hatchSpecificEgg(eggName)
    local hatchMode = getHatchMode()
    
    local success, result = pcall(function()
        -- Script generated by SimpleSpy - credits to exx#9394
        return game:GetService("ReplicatedStorage").Functions.Hatch:InvokeServer(eggName, hatchMode)
    end)
    
    if not success then
        warn("Hatch failed for " .. eggName .. ":", result)
    end
end

HatchTab:CreateParagraph({
    Title = "⚠️ HIGH RISK WARNING ⚠️",
    Content = "Opening Robux Eggs or expired Event Eggs has a VERY HIGH chance of getting you BANNED! Use at your own risk!"
})

local HatchQuantitySection = HatchTab:CreateSection("Hatch Settings")

local QuantityInput = HatchTab:CreateInput({
    Name = "Hatch Amount",
    PlaceholderText = "1, 3, or 5",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        local number = tonumber(Text)
        if number and number > 0 then
            customHatchCount = number
        end
    end,
})

local DelaySlider = HatchTab:CreateSlider({
    Name = "Hatch Delay",
    Range = {0.01, 2},
    Increment = 0.01,
    Suffix = "s",
    CurrentValue = 0.05,
    Flag = "HatchDelaySlider",
    Callback = function(Value)
        hatchDelay = Value
    end,
})

-- Create egg toggle sections
local eggsSection = HatchTab:CreateSection("Eggs")

-- Create toggles for each egg type
for _, eggName in pairs(eggOptions) do
    local toggle = HatchTab:CreateToggle({
        Name = "Auto Hatch " .. eggName,
        CurrentValue = false,
        Flag = "AutoHatch_" .. eggName,
        Callback = function(Value)
            if Value then
                -- Start auto hatching for this egg
                activeToggles[eggName] = true
                
                spawn(function()
                    while activeToggles[eggName] do
                        hatchSpecificEgg(eggName)
                        wait(hatchDelay)
                    end
                end)
            else
                -- Stop auto hatching for this egg
                activeToggles[eggName] = false
            end
        end,
    })
end

-- Set up a connection to update egg toggles when new eggs are added
spawn(function()
    local eggHolders = workspace:WaitForChild("Scripted"):WaitForChild("EggHolders")
    eggHolders.ChildAdded:Connect(function(newEgg)
        -- Wait a moment to ensure the egg is fully loaded
        wait(0.5)
        
        -- Get updated list of eggs
        eggOptions = getEggNames()
        
        -- Create new toggle for the new egg
        local toggle = HatchTab:CreateToggle({
            Name = "Auto Hatch " .. newEgg.Name,
            CurrentValue = false,
            Flag = "AutoHatch_" .. newEgg.Name,
            Callback = function(Value)
                if Value then
                    activeToggles[newEgg.Name] = true
                    
                    spawn(function()
                        while activeToggles[newEgg.Name] do
                            hatchSpecificEgg(newEgg.Name)
                            wait(hatchDelay)
                        end
                    end)
                else
                    activeToggles[newEgg.Name] = false
                end
            end,
        })
    end)
end)

-- Event Tab functionality
local teleporting = false

-- Create Currency section
local CurrencySection = EventTab:CreateSection("Currency")

-- Create the notifications button
local NotificationsButton = EventTab:CreateButton({
    Name = "Delete Notifications",
    Callback = function()
        local notifications = game:GetService("Players").LocalPlayer.PlayerGui.Main.Notifications
        if notifications then
            notifications:Destroy()
        end
    end,
})

-- Create the main teleport toggle
local EventToggle = EventTab:CreateToggle({
    Name = "Auto Collect Easter Currency",
    CurrentValue = false,
    Flag = "AutoCollectEaster",
    Callback = function(Value)
        if Value then
            -- Start teleporting
            teleporting = true
            spawn(function()
                while teleporting do
                    -- Get the player's character
                    local player = game.Players.LocalPlayer
                    local character = player.Character
                    if character then
                        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                        if humanoidRootPart then
                            -- Get all EasterCurrencyPickups
                            local pickups = workspace.Scripted.EasterCurrencyPickups.Active:GetChildren()
                            for _, pickup in pairs(pickups) do
                                if not teleporting then break end -- Stop if toggle is turned off
                                
                                if pickup:FindFirstChild("Hitbox") then
                                    -- Teleport just above the egg
                                    humanoidRootPart.CFrame = CFrame.new(pickup.Hitbox.Position + Vector3.new(0, 3, 0))
                                    wait(0.3) -- Short wait for fall
                                end
                            end
                        end
                    end
                    wait(0.1) -- Short wait between cycles
                end
            end)
        else
            -- Stop teleporting
            teleporting = false
        end
    end,
})

-- Create Claim Houses section
local ClaimHousesSection = EventTab:CreateSection("Claim Houses")

-- Create the auto claim toggle
local AutoClaimToggle = EventTab:CreateToggle({
    Name = "Auto Claim Houses",
    CurrentValue = false,
    Flag = "AutoClaimHouses",
    Callback = function(Value)
        if Value then
            -- Start auto claiming
            getgenv().AutoClaim = true
            spawn(function()
                while getgenv().AutoClaim do
                    local houses = {
                        workspace.Scripted.Islands.Easter.Houses["9"],
                        workspace.Scripted.Islands.Easter.Houses["1"],
                        workspace.Scripted.Islands.Easter.Houses["10"],
                        workspace.Scripted.Islands.Easter.Houses["2"],
                        workspace.Scripted.Islands.Easter.Houses["3"],
                        workspace.Scripted.Islands.Easter.Houses["4"],
                        workspace.Scripted.Islands.Easter.Houses["5"],
                        workspace.Scripted.Islands.Easter.Houses["6"],
                        workspace.Scripted.Islands.Easter.Houses["7"],
                        workspace.Scripted.Islands.Easter.Houses["8"]
                    }
                    
                    for _, house in pairs(houses) do
                        if not getgenv().AutoClaim then break end -- Stop if toggle is turned off
                        
                        local touchPart = house:FindFirstChild("TouchPart")
                        if touchPart and touchPart:FindFirstChild("TouchInterest") then
                            firetouchinterest(touchPart, game.Players.LocalPlayer.Character.HumanoidRootPart, 1)
                            wait()
                            firetouchinterest(touchPart, game.Players.LocalPlayer.Character.HumanoidRootPart, 0)
                            wait(0.5) -- Wait between houses
                        end
                    end
                end
            end)
        else
            -- Stop auto claiming
            getgenv().AutoClaim = false
        end
    end,
})

-- Create Egg Hunt section
local EggHuntSection = EventTab:CreateSection("Egg Hunt")

-- Create the collect eggs button
local CollectEggsButton = EventTab:CreateButton({
    Name = "Collect All Eggs",
    Callback = function()
        local humanoidRootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
        local humanoid = game.Players.LocalPlayer.Character.Humanoid
        local originalPosition = humanoidRootPart.CFrame -- Save original position
        
        local eggs = {
            workspace.Scripted.CollectableEggs["1"],
            workspace.Scripted.CollectableEggs["2"],
            workspace.Scripted.CollectableEggs["3"],
            workspace.Scripted.CollectableEggs["4"],
            workspace.Scripted.CollectableEggs["5"],
            workspace.Scripted.CollectableEggs["6"],
            workspace.Scripted.CollectableEggs["7"],
            workspace.Scripted.CollectableEggs["8"]
        }
        
        for _, egg in pairs(eggs) do
            if egg then
                -- Teleport further away from egg
                humanoidRootPart.CFrame = CFrame.new(egg.Position + Vector3.new(5, 0, 0))
                wait(0.2)
                -- Make character walk into egg
                humanoid:MoveTo(egg.Position)
                wait(1) -- Increased wait time for longer walk
            end
        end
        
        -- Return to original position
        humanoidRootPart.CFrame = originalPosition
    end,
})

-- Create instruction label
local InstructionLabel = EventTab:CreateLabel("Click only once and try again if it doesn't work", "info", Color3.fromRGB(255, 255, 255), false)

-- Guis Tab functionality
-- Create buttons for all TouchParts
local function createTouchPartButtons()
    local touchPartsFolder = workspace.Scripted.TouchParts
    if touchPartsFolder then
        for _, model in pairs(touchPartsFolder:GetChildren()) do
            local touchPart = model:FindFirstChild("TouchPart")
            if touchPart and touchPart:FindFirstChild("TouchInterest") then
                local button = GuisTab:CreateButton({
                    Name = "Open " .. model.Name .. " Gui",
                    Callback = function()
                        -- Trigger the TouchInterest
                        local touchInterest = touchPart.TouchInterest
                        if touchInterest then
                            firetouchinterest(touchPart, game.Players.LocalPlayer.Character.HumanoidRootPart, 1)
                            wait()
                            firetouchinterest(touchPart, game.Players.LocalPlayer.Character.HumanoidRootPart, 0)
                        end
                    end,
                })
            end
        end
    end
end

-- Create the buttons
createTouchPartButtons()

-- Get initial GUI count
local function getGuiCount()
    local count = 0
    local touchPartsFolder = workspace.Scripted.TouchParts
    if touchPartsFolder then
        for _, model in pairs(touchPartsFolder:GetChildren()) do
            local touchPart = model:FindFirstChild("TouchPart")
            if touchPart and touchPart:FindFirstChild("TouchInterest") then
                count = count + 1
            end
        end
    end
    return count
end

-- Info Tab
local InfoSection = InfoTab:CreateSection("Credits")

-- Credits
InfoTab:CreateParagraph({
    Title = "Credits",
    Content = "Made by D3f4ult"
})

-- Discord Button
InfoTab:CreateButton({
    Name = "Join Discord",
    Callback = function()
        setclipboard("https://discord.gg/2ynN9zcVFk")
        Rayfield:Notify({
            Title = "Discord Invite",
            Content = "Invite link copied to clipboard!",
            Duration = 3,
            Image = 4483362458
        })
    end,
})

-- Session Time Section
local SessionTimeSection = InfoTab:CreateSection("Session Time")

-- Session Time
local StartTime = os.time()
local function FormatTime(seconds)
    local hours = math.floor(seconds / 3600)
    local minutes = math.floor((seconds % 3600) / 60)
    local secs = seconds % 60
    return string.format("%02d:%02d:%02d", hours, minutes, secs)
end

local SessionTimeText = InfoTab:CreateLabel("Session Time: 0 seconds")

-- Update session time loop
spawn(function()
    while true do
        wait(1)
        local elapsedTime = os.time() - StartTime
        SessionTimeText:Set("Session Time: " .. FormatTime(elapsedTime))
        
        -- Break loop if GUI is destroyed
        if not SessionTimeText then
            break
        end
    end
end)

-- Executor Info
local ExecutorSection = InfoTab:CreateSection("Executor Information")

local function GetExecutorInfo()
    local executor = identifyexecutor()
    if not executor then
        return "Unknown"
    end
    return executor
end

local function GetExecutorVersion()
    local version = getexecutorname()
    if not version then
        version = getgenv().version or "Unknown"
    end
    return version
end

InfoTab:CreateParagraph({
    Title = "Executor Information",
    Content = "Executor: " .. GetExecutorInfo() .. "\nVersion: " .. GetExecutorVersion()
})

-- Player Info
local PlayerSection = InfoTab:CreateSection("Player Information")

local Player = game.Players.LocalPlayer
local playerAge = Player.AccountAge
local ageText = playerAge == 1 and "1 day" or playerAge .. " days"

InfoTab:CreateParagraph({
    Title = "Player Information",
    Content = "Display Name: " .. Player.DisplayName .. 
             "\nUsername: " .. Player.Name .. 
             "\nAccount Age: " .. ageText
})

-- Show final loading status
Rayfield:Notify({
    Title = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name .. " Status",
    Content = "Script loaded successfully with " .. #eggOptions .. " eggs and " .. getGuiCount() .. " GUIs detected",
    Duration = 5,
    Image = 4483362458,
}) 